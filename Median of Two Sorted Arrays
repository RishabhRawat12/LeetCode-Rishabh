class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size();
        int m = nums2.size();

        if (n > m) {
            return findMedianSortedArrays(nums2, nums1);
        }

        int low = 0;
        int high = n;
        int totalLength = n + m;
        int halfLen = (totalLength + 1) / 2;

        while (low <= high) {
            int i = low + (high - low) / 2;
            int j = halfLen - i;

            long L1 = (i == 0) ? -2147483648LL : nums1[i - 1];
            long R1 = (i == n) ? 2147483647LL : nums1[i];
            long L2 = (j == 0) ? -2147483648LL : nums2[j - 1];
            long R2 = (j == m) ? 2147483647LL : nums2[j];

            if (L1 <= R2 && L2 <= R1) {
                if (totalLength % 2 != 0) {
                    return static_cast<double>(std::max(L1, L2));
                } else {
                    return static_cast<double>(std::max(L1, L2) + std::min(R1, R2)) / 2.0;
                }
            } else if (L1 > R2) {
                high = i - 1;
            } else {
                low = i + 1;
            }
        }
        return 0.0;
    }
};
